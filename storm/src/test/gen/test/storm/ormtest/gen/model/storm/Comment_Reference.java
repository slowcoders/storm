
package test.storm.ormtest.gen.model.storm;

import java.sql.SQLException;

import org.slowcoders.storm.*;
import org.slowcoders.observable.*;

import test.storm.ormtest.schema.*;
import test.storm.ormtest.gen.model.*;

/**
This file is generated by Storm Generator.
Do not modify this file.
*/

public abstract class Comment_Reference extends EntityReference implements Comment_ORM {

	private static final _TableBase.Initializer unsafeTools = _TableBase.initializer;

	IxPost _post;

	/*internal*/ final SubComment_Table.RowSet _subComments;

	public static abstract class Editor extends Comment_Editor {
		protected Editor(Comment_Table table, Comment_Snapshot origin) {
			super(table, origin);
		}

	}
	protected Comment_Reference(long id) {
		super(id);
		this._subComments = _TableBase.tSubComment.findByComment(this);
	}

	public final Comment_Table getTable() {
		return _TableBase.tComment;
	}

	public final IxComment.Snapshot tryLoadSnapshot() {
		return (IxComment.Snapshot)super.doTryLoadSnapshot();
	}

	public final IxComment.Snapshot loadSnapshot() {
		return (IxComment.Snapshot)super.doLoadSnapshot();
	}

	public final IxPost getPost() {
		doLoadForeignKeys();
		return this._post;
	}

	public final SubComment_Table.RowSet getSubComments() {
		SubComment_Table.RowSet res = _subComments;
		return res;
	}

	public void deleteEntity() throws SQLException {
		super.doDelete();
	}

	/****************************************/
	/*  Internal methods                    */
	/*--------------------------------------*/

	protected void onDelete_inTR() throws SQLException {
		onDelete_inTR(this.getSubComments());
		super.onDelete_inTR();
	}

	protected final void validateForeignKey_RT(EntitySnapshot entity) {
		IxComment.Snapshot d = (IxComment.Snapshot)entity;
		if (DebugUtil.DEBUG) DebugUtil.assertNullOrMatch(this._post, d.getPost());
		this._post = d.getPost();

	}

	protected void invalidateForeignEntityCache_RT(ChangeType reason) {
		super.invalidateForeignEntityCache_RT(reason);
		((Post_Reference)getPost()).__invalidateComments();
	}

	final boolean __invalidateSubComments() {
		EntitySnapshot data = super.invalidateEntityCache_RT(ChangeType.OuterLinkChanged);
		if (data != null) {
			((IxComment.Snapshot)data).getSubComments();
			return true;
		}
		return false;
	}

}
