
package test.storm.ormtest.gen.model.storm;

import java.sql.SQLException;
import java.util.*;

import org.slowcoders.util.*;
import org.slowcoders.storm.*;
import org.slowcoders.storm.orm.*;

import test.storm.ormtest.schema.*;
import test.storm.ormtest.gen.model.*;

import java.lang.String;

/**
This file is generated by Storm Generator.
Do not modify this file.
*/

public final class Post_Table extends TestDatabase.Table<IxPost.Snapshot, IxPost, IxPost.Editor> implements AbstractTable<IxPost.Snapshot, IxPost, IxPost.Editor> {

	private StormQuery findBySubject;

	private StormQuery findBySubject_groupByTag;

	private StormQuery groupByTag;

	private StormQuery findByUser;

	private static class _Ref extends IxPost {
		_Ref(long id) { super(id); }

		protected static class Editor extends IxPost.Editor {
			protected Editor(Post_Table table, Post_Snapshot origin) {
				super(table, origin);
			}
		}
	}

	private static class _Snapshot extends IxPost.Snapshot {
		_Snapshot(IxPost ref) { super(ref); }
	}

	protected Post_Table(String tableName) {
		super(tableName);
	}

	protected IxPost createEntityReference(long entityId) { return new _Ref(entityId); }

	protected IxPost.Snapshot createEntitySnapshot(EntityReference ref) { return new _Snapshot((IxPost)ref); }

	protected void init() throws Exception {
		super.init();
		try {
			findBySubject = super.createQuery("WHERE _subject like ?", null);
			findBySubject_groupByTag = super.createQuery("WHERE _subject like ? GROUP BY _tag HAVING MAX(rowid)", null);
			groupByTag = super.createQuery("WHERE true GROUP BY _tag", null);
			findByUser = super.createQuery("WHERE _user = ?", null);
		}
		catch (Exception e) {
			throw Debug.wtf(e);
		}
	}

	public IxPost.Editor newEntity() {
		return edit((Post_Snapshot)null);
	}

	public IxPost.Editor edit(Post_Snapshot entity) {
		return new _Ref.Editor(this, entity);
	}

	public IxPost.Editor edit(IxPost ref) throws InvalidEntityReferenceException {
		return edit(ref == null ? null : ref.loadSnapshot());
	}

	public IxPost.Editor edit(IxPost_.UpdateForm form) throws InvalidEntityReferenceException, SQLException {
		IxPost.Editor edit = edit(form.getOriginalData());
		edit._set(form);
		return edit;
	}

	protected IxPost.Editor edit(EntitySnapshot entity) throws InvalidEntityReferenceException {
		return edit((IxPost.Snapshot)entity);
	}

	public void getTableConfiguration(StormTable.Config config) {
		config.rowIdStart = 0L;
		config.helper = _Ref.createORMHelper();
		config.snapshotType = _Snapshot.class;
		config.referenceType = _Ref.class;
		config.entityCache = TableDefinition.CacheType.Soft;
		config.isFts = false;
	}

	protected IxPost createGhostRef() {
		return super.createGhostRef();
	}

	public void deleteEntities(Collection<IxPost> entities) throws SQLException {
		super.doDeleteEntities(entities);
	}

	public final void updateEntities(ColumnAndValue[] updateValues, Collection<IxPost> entities) throws SQLException, RuntimeException {
		super.doUpdateEntities(updateValues, entities);
	}

	public final Class<Post_ORM> getORMDefinition() {
		return Post_ORM.class;
	}

	// WHERE _subject like ?
	public Post_Table.RowSet findBySubject(java.lang.String subject) {
		return new Post_Table.RowSet(findBySubject, null, subject);
	}

	// WHERE _subject like ? GROUP BY _tag HAVING MAX(rowid)
	public Post_Table.RowSet findBySubject_groupByTag(java.lang.String subject) {
		return new Post_Table.RowSet(findBySubject_groupByTag, null, subject);
	}

	// WHERE true GROUP BY _tag
	public Post_Table.RowSet groupByTag() {
		return new Post_Table.RowSet(groupByTag, null);
	}

	public RowSet findByUser (User_ORM _user) {
		return new RowSet(findByUser, Post_ORM.User, _user);
	}

	public static final class RowSet extends StormFilter<IxPost.Snapshot, IxPost, IxPost.Editor> implements StormRowSet<IxPost.Snapshot, IxPost, IxPost.Editor> {
		public RowSet(StormQuery query, ORMColumn foreignKey, Object... values) {
			super(query, foreignKey, values);
		}

	}
	protected void clearAllCache_UNSAFE_DEBUG() {
		super.clearAllCache_UNSAFE_DEBUG();
	}
}


