
package org.slowcoders.sample.orm.gen.storm;

import static org.slowcoders.storm.orm.ORMFlags.*;
import java.sql.SQLException;
import java.util.*;
import com.google.common.collect.*;
import org.slowcoders.util.*;
import org.slowcoders.storm.*;
import org.slowcoders.storm.orm.*;
import org.slowcoders.storm.util.*;
import org.slowcoders.io.serialize.*;
import org.slowcoders.observable.*;

import org.slowcoders.sample.orm.def.*;
import org.slowcoders.sample.orm.gen.*;
import java.util.List;
import org.slowcoders.sample.orm.def.User_ORM;
import org.slowcoders.sample.orm.def.User_ORM;
import java.lang.String;

/**
This file is generated by Storm Generator.
Do not modify this file.
*/

public abstract class User_Editor extends EntityEditor implements User_ORM, IxUser.UpdateForm {

	private static final _TableBase.Initializer unsafeTools = _TableBase.initializer;

	static final IxUser ghost = _TableBase.tUser.createGhostRef();

	/*internal*/ EditableEntities<IxPost.UpdateForm, IxPost.Editor> _posts;

	/*internal*/ IxPhoto.UpdateForm _photo;

	/*internal*/ Description_ORM _description;

	protected User_Editor(User_Table table, User_Snapshot origin) {
		super(table, origin);
		if (origin != null) {
			this._photo = origin.getPhoto();
		}
	}

	public final User_Table getTable() {
		return (User_Table)super.getTable();
	}

	public final IxUser getEntityReference() {
		return (IxUser)super.getEntityReference_internal();
	}

	public final IxUser.Snapshot getOriginalData() {
		return (IxUser.Snapshot)super.getOriginalData_internal();
	}

	public final String getEmailAddress() {
		String v = (String) super.getObjectValue(User_ORM.EmailAddress);
		return v;
	}

	public final void setEmailAddress(String v) {
		super.setFieldValue(User_ORM.EmailAddress, v);
	}

	public final String getName() {
		String v = (String) super.getObjectValue(User_ORM.Name);
		return v;
	}

	public final void setName(String v) {
		super.setFieldValue(User_ORM.Name, v);
	}

	public final User_ORM.UserGender getGender() {
		User_ORM.UserGender v = (User_ORM.UserGender) super.getObjectValue(User_ORM.Gender);
		return v;
	}

	public final void setGender(User_ORM.UserGender v) {
		super.setFieldValue(User_ORM.Gender, v);
	}

	public final EnumSet<User_ORM.Interest> getInterests() {
		Set<User_ORM.Interest> v = (Set<User_ORM.Interest>) super.getObjectValue(User_ORM.Interests);
		if (v == null || v instanceof ImmutableCollection) {
			v = StormUtils.toMutableEnumSet(v, org.slowcoders.sample.orm.def.User_ORM.Interest.class);
			super.setFieldValue(User_ORM.Interests, v);
		}
		return (EnumSet<User_ORM.Interest>)v;
	}

	public final boolean getInterests_Food() {
		return getInterests().contains(User_ORM.Interest.Food);
	}

	public final void setInterests_Food(boolean on) {
		EnumSet<User_ORM.Interest> v = getInterests();
		if (on) {
			v.add(User_ORM.Interest.Food);
		} else {
			v.remove(User_ORM.Interest.Food);
		}
	}

	public final boolean getInterests_Sports() {
		return getInterests().contains(User_ORM.Interest.Sports);
	}

	public final void setInterests_Sports(boolean on) {
		EnumSet<User_ORM.Interest> v = getInterests();
		if (on) {
			v.add(User_ORM.Interest.Sports);
		} else {
			v.remove(User_ORM.Interest.Sports);
		}
	}

	public final boolean getInterests_Travel() {
		return getInterests().contains(User_ORM.Interest.Travel);
	}

	public final void setInterests_Travel(boolean on) {
		EnumSet<User_ORM.Interest> v = getInterests();
		if (on) {
			v.add(User_ORM.Interest.Travel);
		} else {
			v.remove(User_ORM.Interest.Travel);
		}
	}

	public final boolean getInterests_Book() {
		return getInterests().contains(User_ORM.Interest.Book);
	}

	public final void setInterests_Book(boolean on) {
		EnumSet<User_ORM.Interest> v = getInterests();
		if (on) {
			v.add(User_ORM.Interest.Book);
		} else {
			v.remove(User_ORM.Interest.Book);
		}
	}

	public final void setInterests(Set<User_ORM.Interest> v) {
		super.setFieldValue(User_ORM.Interests, v);
	}

	public final EditableEntities<IxPost.UpdateForm, IxPost.Editor> editPosts() throws InvalidEntityReferenceException {
		if (this._posts == null) {
			this._posts = new EditableEntities<>(this.getPosts());
			super.setFieldValue(User_ORM.Posts, this._posts);
		}
		return this._posts;
	}

	public final Post_Table.RowSet getPosts() {
		User_Snapshot org = this.getOriginalData();
		Post_Table.RowSet v = org != null ? org.getEntityReference().getPosts()
				 : _TableBase.tPost.findByUser(this);
		return v;
	}

	public final List<? extends IxPost.UpdateForm> peekPosts() {
		return getPosts().loadEntities();
	}

	public final IxPhoto.Editor editPhoto() {
		IxPhoto.UpdateForm v = this._photo;
		if (EntityEditor.asEditor(v) == null) {
			User_Snapshot org = this.getOriginalData();

			IxPhoto.Snapshot sub = org == null ? null : org.getPhoto();
			Photo_Editor edit = _TableBase.tPhoto.edit(sub == null || sub.getEntityReference().isDeleted() ? null : sub);
			edit.__setUser(this);
			this._photo = edit;
			super.setFieldValue(User_ORM.Photo, edit);
		}
		return (IxPhoto.Editor)this._photo;
	}

	public final IxPhoto.UpdateForm getPhoto() {
		return this._photo;
	}

	public final void removePhoto() {
		this._photo = null;
		super.setFieldValue(User_ORM.Photo, _photo);
	}

	public final IxDescription.Editor editDescription() throws InvalidEntityReferenceException {
		Description_ORM v = this._description;
		if (EntityEditor.asEditor(v) == null) {
			IxDescription sub = getDescription();
			Description_Editor edit = _TableBase.tDescription.edit(sub == null || sub.getEntityReference().isDeleted() ? null : sub);
			edit.__setUser(this);
			this._description = edit;
			super.setFieldValue(User_ORM.Description, edit);
		}
		return (IxDescription.Editor)this._description;
	}

	public final IxDescription getDescription() {
		User_Snapshot org = this.getOriginalData();
		IxDescription v = org != null ? org.getEntityReference().getDescription()
				 : _TableBase.tDescription.findByUser(this);
		return v;
	}

	public final void setDescription(Description_ORM v) {
		this._description = v;
		super.setFieldValue(User_ORM.Description, v);
	}

	public IxUser save() throws SQLException, RuntimeException {
		return (IxUser)super.doSave(false);
	}

	public IxUser saveAndContinueEdit() throws SQLException, RuntimeException {
		return (IxUser)super.doSave(true);
	}

	protected void onSave_inTR() throws SQLException, RuntimeException {
		if (this.isChanged()) {
			super.onSave_inTR();
		}

		User_Snapshot origin = (User_Snapshot)this.getOriginalData();
		super.__saveJoinedEntitiesInternal(this._posts, _TableBase.tPost.findByUser(this));
		super.__saveOrDeleteJoinedEntityInternal(origin == null ? null : origin.getPhoto(), this._photo);
		super.__saveJoinedEntityInternal(this._description);
	}

	protected void validate_inTR() throws RuntimeException {
		super.validate_inTR();
	}

	public void _set(IxUser_.UpdateForm data) {
		setEmailAddress(data.getEmailAddress());
		setName(data.getName());
		if (data.peekPosts() != null) {
			editPosts().replaceAll(data.peekPosts());
		}
		setGender(data.getGender());
		setInterests(data.getInterests());
		if (data.getPhoto() != null) {
			editPhoto()._set(data.getPhoto());
		} else {
			this.removePhoto();
		}
		this._description = ((IxDescription.Snapshot)data.getDescription().loadSnapshot()).editEntity();
	}

}

