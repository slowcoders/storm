
package org.slowcoders.sample.orm.gen.storm;

import static org.slowcoders.storm.orm.ORMFlags.*;
import java.sql.SQLException;
import java.util.*;
import com.google.common.collect.*;
import org.slowcoders.util.*;
import org.slowcoders.storm.*;
import org.slowcoders.storm.orm.*;
import org.slowcoders.storm.util.*;
import org.slowcoders.io.serialize.*;
import org.slowcoders.observable.*;

import org.slowcoders.sample.orm.def.*;
import org.slowcoders.sample.orm.gen.*;
import java.util.List;
import org.joda.time.DateTime;
import java.lang.String;

/**
This file is generated by Storm Generator.
Do not modify this file.
*/

public final class Comment_Table extends ORMDatabase.Table<IxComment.Snapshot, IxComment, IxComment.Editor> implements AbstractTable<IxComment.Snapshot, IxComment, IxComment.Editor> {

	private StormQuery findByPost;

	private static class _Ref extends IxComment {
		_Ref(long id) { super(id); }

		protected static class Editor extends IxComment.Editor {
			protected Editor(Comment_Table table, Comment_Snapshot origin) {
				super(table, origin);
			}
		}
	}

	private static class _Snapshot extends IxComment.Snapshot {
		_Snapshot(IxComment ref) { super(ref); }
	}

	protected Comment_Table(String tableName) {
		super(tableName);
	}

	protected IxComment createEntityReference(long entityId) { return new _Ref(entityId); }

	protected IxComment.Snapshot createEntitySnapshot(EntityReference ref) { return new _Snapshot((IxComment)ref); }

	protected void init() throws Exception {
		super.init();
		try {
			findByPost = super.createQuery("WHERE _post = ?", null);
		}
		catch (Exception e) {
			throw Debug.wtf(e);
		}
	}

	public IxComment.Editor newEntity() {
		return edit((Comment_Snapshot)null);
	}

	public IxComment.Editor edit(Comment_Snapshot entity) {
		return new _Ref.Editor(this, entity);
	}

	public IxComment.Editor edit(IxComment ref) throws InvalidEntityReferenceException {
		return edit(ref == null ? null : ref.loadSnapshot());
	}

	public IxComment.Editor edit(IxComment_.UpdateForm form) throws InvalidEntityReferenceException, SQLException {
		IxComment.Editor edit = edit(form.getOriginalData());
		edit._set(form);
		return edit;
	}

	protected IxComment.Editor edit(EntitySnapshot entity) throws InvalidEntityReferenceException {
		return edit((IxComment.Snapshot)entity);
	}

	public void getTableConfiguration(StormTable.Config config) {
		config.rowIdStart = 0L;
		config.helper = _Ref.createORMHelper();
		config.snapshotType = _Snapshot.class;
		config.referenceType = _Ref.class;
		config.entityCache = TableDefinition.CacheType.Soft;
		config.isFts = false;
	}

	protected IxComment createGhostRef() {
		return super.createGhostRef();
	}

	public void deleteEntities(Collection<IxComment> entities) throws SQLException {
		super.doDeleteEntities(entities);
	}

	public final void updateEntities(ColumnAndValue[] updateValues, Collection<IxComment> entities) throws SQLException, RuntimeException {
		super.doUpdateEntities(updateValues, entities);
	}

	public final Class<Comment_ORM> getORMDefinition() {
		return Comment_ORM.class;
	}

	public RowSet findByPost (Post_ORM _post) {
		return new RowSet(findByPost, Comment_ORM.Post, _post);
	}

	public static final class RowSet extends StormFilter<IxComment.Snapshot, IxComment, IxComment.Editor> implements StormRowSet<IxComment.Snapshot, IxComment, IxComment.Editor> {
		public RowSet(StormQuery query, ORMColumn foreignKey, Object... values) {
			super(query, foreignKey, values);
		}

	}
	protected void clearAllCache_UNSAFE_DEBUG() {
		super.clearAllCache_UNSAFE_DEBUG();
	}
}


